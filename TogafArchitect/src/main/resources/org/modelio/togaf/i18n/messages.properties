Mdac.TogafPropertyPage.Label=Togaf
Ui.Command.ArchitectureToJavaTransformation.Label=Transformation of Architecture model to Java implementation
Ui.Command.ArchitectureToJavaTransformation.Slot=Model transformation
Ui.Command.ArchitectureToJavaTransformation.Tooltip=Model transformation
Ui.Command.BusinessEntityCatalog.Label=Business Entities Catalog
Ui.Command.BusinessEntityCatalog.Slot=Document production|Catalogs (Modelio)
Ui.Command.BusinessEntityCatalog.Tooltip=Business Entities Catalog
Ui.Command.BusinessToExchangeDataTransformation.Label=Message generation from Business Entities
Ui.Command.BusinessToExchangeDataTransformation.Slot=Model transformation
Ui.Command.BusinessToExchangeDataTransformation.Tooltip=Message generation from Business Entities
Ui.Command.BusinessToPersistantTransformation.Label=Data Model generation from Business Entities
Ui.Command.BusinessToPersistantTransformation.Slot=Model transformation
Ui.Command.BusinessToPersistantTransformation.Tooltip=Data Model generation from Business Entities
Ui.Command.ComponentCatalog.Label=Component Catalog
Ui.Command.ComponentCatalog.Slot=Document production|Catalogs (Modelio)
Ui.Command.ComponentCatalog.Tooltip=Component Catalog
Ui.Command.InformationServiceCatalog.Label=Information Service Catalog
Ui.Command.InformationServiceCatalog.Slot=Document production|Catalogs (Modelio)
Ui.Command.InformationServiceCatalog.Tooltip=Information Service Catalog
Ui.Command.ProductActorRoleMatrix.Label=Actor - Role Matrix
Ui.Command.ProductActorRoleMatrix.Slot=Document production|Matrices
Ui.Command.ProductActorRoleMatrix.Tooltip=Actor - Role Matrix
Ui.Command.ProductApplicationInteractionMatrix.Label=Application - Interaction Matrix
Ui.Command.ProductApplicationInteractionMatrix.Slot=Document production|Matrices
Ui.Command.ProductApplicationInteractionMatrix.Tooltip=Application - Interaction Matrix
Ui.Command.ProductBusinessCatalog.Label=BusinessService - Function Catalog
Ui.Command.ProductBusinessCatalog.Slot=Document production|Catalogs
Ui.Command.ProductBusinessCatalog.Tooltip=Business Service - Function Catalog
Ui.Command.ProductBusinessInteractionMatrix.Label=Business - Interaction Matrix
Ui.Command.ProductBusinessInteractionMatrix.Slot=Document production|Matrices
Ui.Command.ProductBusinessInteractionMatrix.Tooltip=Business - Interaction Matrix
Ui.Command.ProductDataEntityBusinessFunctionMatrix.Label=Data Entity - Business Function Matrix
Ui.Command.ProductDataEntityBusinessFunctionMatrix.Slot=Document production|Matrices
Ui.Command.ProductDataEntityBusinessFunctionMatrix.Tooltip=Data Entity - Business Function Matrix
Ui.Command.ProductGoalCatalog.Label=Driver - Goal - Objective Catalog
Ui.Command.ProductGoalCatalog.Slot=Document production|Catalogs
Ui.Command.ProductGoalCatalog.Tooltip=Driver - Goal - Objective Catalog
Ui.Command.ProductLocationCatalog.Label=Location Catalog
Ui.Command.ProductLocationCatalog.Slot=Document production|Catalogs
Ui.Command.ProductLocationCatalog.Tooltip=Location Catalog
Ui.Command.ProductOrganizationCatalog.Label=Organization Catalog
Ui.Command.ProductOrganizationCatalog.Slot=Document production|Catalogs
Ui.Command.ProductOrganizationCatalog.Tooltip=Organization Catalog
Ui.Command.ProductProcessEventControlProductCatalog.Label=Process - Event - Control - Product Catalog
Ui.Command.ProductProcessEventControlProductCatalog.Slot=Document production|Catalogs
Ui.Command.ProductProcessEventControlProductCatalog.Tooltip=Process - Event - Control - Product Catalog
Ui.Command.ProductRoleCatalog.Label=Role - Actor Catalog
Ui.Command.ProductRoleCatalog.Slot=Document production|Catalogs
Ui.Command.ProductRoleCatalog.Tooltip=Role - Actor Catalog
Ui.Command.ProductRoleSystemMatrix.Label=Role - System Matrix
Ui.Command.ProductRoleSystemMatrix.Slot=Document production|Matrices
Ui.Command.ProductRoleSystemMatrix.Tooltip=Role - System Matrix
Ui.Command.ProductSystemDataMatrix.Label=Product - System - Data Matrix
Ui.Command.ProductSystemDataMatrix.Slot=Document production|Matrices
Ui.Command.ProductSystemDataMatrix.Tooltip=Product - System - Data Matrix
Ui.Command.ProductSystemFunctionMatrix.Label=System - Function Matrix
Ui.Command.ProductSystemFunctionMatrix.Slot=Document production|Matrices
Ui.Command.ProductSystemFunctionMatrix.Tooltip=System - Function Matrix
Ui.Command.ProductSystemOrganizationMatrix.Label=System - Organization Matrix
Ui.Command.ProductSystemOrganizationMatrix.Slot=Document production|Matrices
Ui.Command.ProductSystemOrganizationMatrix.Tooltip=Label=System - Organization Matrix
Ui.Command.ServiceDataCatalog.Label=Service Data Catalog
Ui.Command.ServiceDataCatalog.Slot=Document production|Catalogs (Modelio)
Ui.Command.ServiceDataCatalog.Tooltip=Service Data Catalog
Ui.Command.UseCasesCatalog.Label=Use Cases Catalog
Ui.Command.UseCasesCatalog.Slot=Document production|Catalogs (Modelio)
Ui.Command.UseCasesCatalog.Tooltip=Use Cases Catalog
Ui.ModelSelectionGui.Shell=Modelio
Ui.ModelSelectionGui.Title=Point of view selection  
Ui.ModelSelectionGui.Message=
Ui.ModelSelectionGui.TogafLabel=TOGAF
Ui.ModelSelectionGui.TogafImage=/res/bpm/togaf32.png
Ui.ModelSelectionGui.TogafDescription=Framework for Entreprise Architecture which provides a comprehensive approach to the design, planning, implementation, and governance of an enterprise information architecture. 
Ui.ModelSelectionGui.SoaLabel=SOA Architect
Ui.ModelSelectionGui.SOAImage=/res/bpm/soa32.png
Ui.ModelSelectionGui.SOADescription=Architectural style based on the concept of service, intended to simplify the interaction of brick architecture providing flexibility to the system.
Ui.ModelSelectionGui.BPMLabel=BPM / Business Architecture
Ui.ModelSelectionGui.BPMImage=/res/bpm/bpm32.png
Ui.ModelSelectionGui.BPMDescription=Modeling the part of Enterprise Architecture related to corporate business, and the documents and diagrams that describe that architectural structure of business.
Ui.Command.CreateMatrix.Slot=Traceability Matrices
Ui.Command.CreateBusinessInteractionMatrix.Label=Business - Interaction Matrix
Ui.Command.CreateBusinessInteractionMatrix.Tooltip=Create Business - Interaction Matrix
Ui.Command.CreateActorRoleMatrix.Label=Actor - Role Matrix
Ui.Command.CreateActorRoleMatrix.Tooltip=Create Actor - Role Matrix
Ui.Command.CreateDataEntityBusinessFunctionMatrix.Label=DataEntity - BusinessFunction Matrix
Ui.Command.CreateDataEntityBusinessFunctionMatrix.Tooltip=Create DataEntity - BusinessFunction Matrix
Ui.Command.CreateSystemDataMatrix.Label=System - Data Matrix
Ui.Command.CreateSystemDataMatrix.Tooltip=Create System - Data Matrix
Ui.Command.CreateSystemOrganizationMatrix.Label=System - Organization Matrix
Ui.Command.CreateSystemOrganizationMatrix.Tooltip=Create System - Organization Matrix
Ui.Command.CreateRoleSystemMatrix.Label=Role - System Matrix
Ui.Command.CreateRoleSystemMatrix.Tooltip=Create Role - System Matrix
Ui.Command.CreateSystemFunctionMatrix.Label=System - Function Matrix
Ui.Command.CreateSystemFunctionMatrix.Tooltip=Create System - Function Matrix 
Ui.Command.CreateApplicationInteractionMatrix.Label=Application - Interaction Matrix
Ui.Command.CreateApplicationInteractionMatrix.Tooltip=Create Application - Interaction Matrix
module.start.error.title=Couldn''t start "{0}".
module.start.error.module = No license available for "{0}" module.\r\n\r\nDetail:\r\nNo valid feature found.\r\n\r\nFor more information, please contact Modeliosoft support team (support@modeliosoft.com).
Ui.Diagram.Drawing=Free drawing


PALETTE_Actor_Role=Actor - Role
PALETTE_Analyst=Analyst
PALETTE_Common=Common
PALETTE_Component=Component
PALETTE_Container=Container
PALETTE_Data=Data
PALETTE_Default=Default
PALETTE_Entity=Entity
PALETTE_Function=Function
PALETTE_Link=Link
PALETTE_Location=Location
PALETTE_Process=Process
PALETTE_Service=Service
PALETTE_ServiceData=ServiceData
PALETTE_Structure=Structure
PALETTE_NetworkNode=Network Node
PALETTE_System=System
PALETTE_BusinessElements=Business Elements
ApplicationArchitecture_COMMANDENAME=ApplicationArchitecture
ApplicationArchitecture_ERROR=Invalid owner element : Application Architecture
ApplicationArchitecture_NAME=Application Architecture
ApplicationArchitecture_Template=The application architecture is modeled under this domain. \nApplication components are the main elements modeled, with their provided or required IS services.\n\nDiagrams:\n- Solution Concept diagrams provide a high-level orientation of the solution that is envisaged in order to meet the objectives of the architecture engagement.\n- Application and User Location diagrams show the geographical distribution of applications.\n- Application and User Location diagrams show the geographical distribution of applications.\n- Enterprise Manageability diagrams show how one or more applications interact with application and technology components that support operational management of a solution.\n- Process/System Realization diagrams clearly depict the sequence of events when multiple applications are involved in executing a business process.\n- Project Context diagrams show the scope of a work package to be implemented as a part of a broader transformation roadmap.\n- Benefits diagrams show opportunities identified in an architecture definition, classified according to their relative size, benefit, and complexity. 
ApplicationArchitecture_TOOLTYPE=Application Architecture
ApplicationArchitectureAttribute_COMMANDENAME=ApplicationArchitectureAttribute
ApplicationArchitectureAttribute_ERROR=Invalid owner element : Application Attribute
ApplicationArchitectureAttribute_NAME=Application Attribute
ApplicationArchitectureAttribute_TOOLTYPE=Application Attribute
ApplicationArchitectureDomain_COMMANDENAME=ApplicationArchitectureDomain
ApplicationArchitectureDomain_ERROR=Invalid owner element : Application Domain
ApplicationArchitectureDomain_NAME=Application Domain
ApplicationArchitectureDomain_TOOLTYPE=Application Domain
ApplicationComponentOperation_COMMANDENAME=ApplicationComponentOperation
ApplicationComponentOperation_ERROR=Invalid owner element : Application Operation
ApplicationComponentOperation_NAME=Application Operation
ApplicationComponentOperation_TOOLTYPE=Application Operation
ApplicationLayer_COMMANDENAME=ApplicationLayer
ApplicationLayer_ERROR=Invalid owner element : Application Layer
ApplicationLayer_NAME=Application Layer
ApplicationLayer_Template=The application layer is related to the application models. The data architecture is in particular modeled under the \u0022data architecture\u0022 domain, where persistent data are defined. They can be derived from the business entities defined under the Business Layer/Business entities domain.\nThe application components and their architecture are defined under the \u0022Application Architecture\u0022 domain.
ApplicationLayer_TOOLTYPE=Application Layer
assigned_COMMANDENAME=Assigned
assigned_ERROR=Assigned : Actor/Package/Process -> Goal
assigned_NAME=Assigned
assigned_TOOLTYPE=Actor/Package/Process -> Goal
Assumes_COMMANDENAME=Assumes
Assumes_ERROR=Assumes : Actor -> Role
Assumes_NAME=Assumes
Assumes_TOOLTYPE=Actor -> Role
BusinessArchitecture_COMMANDENAME=BusinessArchitecture
BusinessArchitecture_ERROR=Invalid owner element : Business Architecture
BusinessArchitecture_NAME=Business Architecture
BusinessArchitecture_Template=In TOGAF, the Business Architecture defines the business strategy, governance, organization, and key business processes.\nAll these elements are modeled under this domain, with predefined subdomains.
BusinessArchitecture_TOOLTYPE=Business Architecture
BusinessAttribute_COMMANDENAME=BusinessAttribute
BusinessAttribute_ERROR=Invalid owner element : Attribute
BusinessAttribute_NAME=Attribute
BusinessAttribute_TOOLTYPE=Attribute
BusinessDataType_COMMANDENAME=BusinessDataType
BusinessDataType_ERROR=Invalid owner element : Business Data Type
BusinessDataType_NAME=Business Data Type
BusinessDataType_TOOLTYPE=Business Data Type
BusinessEntities_COMMANDENAME=BusinessEntities
BusinessEntities_ERROR=Invalid owner element : Business Entities
BusinessEntities_NAME=Business Entities
BusinessEntities_Template=Business Entities is related to TOGAF\u0027s Data Architecture. In this domain, data is modeled at a conceptual level. The focus is the notions that are handled in the business, their properties, associations lifecycles, etc. Information domains are structuring busines entities that are modeled using dedicated class diagrams.\nPersistency modeling is not the focus at this stage. You can use the \u0022Togaf\u0022 menu to automatically generate a persistency model within the Application Architecture, and/or to generate application components from the modeled Business Entities.
BusinessEntities_TOOLTYPE=Business Entities
BusinessEntity_COMMANDENAME=BusinessEntity
BusinessEntity_ERROR=Invalid owner element : Dusiness Entity
BusinessEntity_NAME=Business Entity
BusinessEntity_TOOLTYPE=Business Entity
BusinessInvariant_COMMANDENAME=BusinessInvariant
BusinessInvariant_ERROR=Invalid owner element : Invariant
BusinessInvariant_NAME=Invariant
BusinessInvariant_TOOLTYPE=Invariant
BusinessLayer_COMMANDENAME=BusinessLayer
BusinessLayer_ERROR=Invalid owner element : Business Layer
BusinessLayer_NAME=Business Layer
BusinessLayer_Template=The Business Layer domain contains the TOGAF Business architecture and Business Entities.\nIt is decomposed into the Business Architecture domain and the Business Entities domain, where the models are developped.
BusinessLayer_TOOLTYPE=Business Layer
BusinessOperation_COMMANDENAME=BusinessOperation
BusinessOperation_ERROR=Invalid owner element : Business Operation
BusinessOperation_NAME=Operation
BusinessOperation_TOOLTYPE=Operation
BusinessOrganizationDomain_COMMANDENAME=BusinessOrganizationDomain
BusinessOrganizationDomain_ERROR=Invalid owner element : Organization Domain
BusinessOrganizationDomain_NAME=Organization Domain
BusinessOrganizationDomain_TOOLTYPE=Organization Domain
Communicates_COMMANDENAME=Communicates
Communicates_ERROR=Communicates with : Role/Actor -> Role/Actor
Communicates_NAME=Communicates with
Communicates_TOOLTYPE=Role/Actor -> Role/Actor
ComponentRealization_COMMANDENAME=ComponentRealization
ComponentRealization_ERROR=Realizes : Component -> Service/Process/Use Case
ComponentRealization_NAME=Component Realization
ComponentRealization_TOOLTYPE=Component -> Service/Process/Use Case
Connexion_capacity_NAME=Capacity
Connexion_COMMANDENAME=Connexion
Connexion_ERROR=Connection : Hardware Technology Component/Instance -> Hardware Technology Component/Instance
Connexion_NAME=Connection
Connexion_protocol_NAME=Protocol
Connexion_TOOLTYPE=Hardware Tecnology Component/Instance -> Hardware Tecnology Component/Instance
ContractOf_COMMANDENAME=ContractOf
ContractOf_ERROR=Contract : Service -> Service Contract
ContractOf_NAME=Contract of
ContractOf_TOOLTYPE=Service -> Service Contract
Data_Template=The Data Architecture is in particular modeled under the \u0022Data Architecture\u0022 domain, where persistent data are defined. They can be derived from the Business Entities defined under the Business Layer/Business Entities domain.
DataBaseApplicationComponent_COMMANDENAME=DataBaseApplicationComponent
DataBaseApplicationComponent_ERROR=Invalid owner element : Database
DataBaseApplicationComponent_NAME=Database
DataBaseApplicationComponent_TOOLTYPE=Database
DeploymentInternet_COMMANDENAME=DeploymentInternet
DeploymentInternet_ERROR=Invalid owner element : Internet
DeploymentInternet_NAME=Internet
DeploymentInternet_TOOLTYPE=Internet
DeploymentNetworkNode_COMMANDENAME=DeploymentNetworkNode
DeploymentNetworkNode_ERROR=Invalid owner element : Network Node
DeploymentNetworkNode_NAME=Network Node
DeploymentNetworkNode_TOOLTYPE=Network Node
DeploymentRouter_COMMANDENAME=DeploymentRouter
DeploymentRouter_ERROR=Invalid owner element : Router
DeploymentRouter_NAME=Router
DeploymentRouter_TOOLTYPE=Router
DeploymentServer_COMMANDENAME=DeploymentServer
DeploymentServer_ERROR=Invalid owner element : Server
DeploymentServer_NAME=Server
DeploymentServer_TOOLTYPE=Server
DeploymentSwitch_COMMANDENAME=DeploymentSwitch
DeploymentSwitch_ERROR=Invalid owner element : Switch
DeploymentSwitch_NAME=Switch
DeploymentSwitch_TOOLTYPE=Switch
DeploymentWorkStation_COMMANDENAME=DeploymentWorkStation
DeploymentWorkStation_ERROR=Invalid owner element : Workstation
DeploymentWorkStation_NAME=Workstation
DeploymentWorkStation_TOOLTYPE=Workstation
EntityApplicationComponent_COMMANDENAME=EntityApplicationComponent
EntityApplicationComponent_ERROR=Invalid owner element : Entity Component
EntityApplicationComponent_NAME=Entity Component
EntityApplicationComponent_TOOLTYPE=Entity Component
EntityLifeCycle_COMMANDENAME=EntityLifeCycle
EntityLifeCycle_ERROR=Invalid owner element : Lifecycle
EntityLifeCycle_NAME=Lifecycle
EntityLifeCycle_TOOLTYPE=Lifecycle
Function_Template=The \u0022Business functions\u0022 domain is used to define business functions and business services.\n\nDiagrams:\n- Fonctional decomposition diagrams are used to summarize the capacities of an organization.\n- Value chain diagrams provide a high-level orientation view of an enterprise and how it interacts with the outside world.\n- Business Service/Information diagrams show the information needed to support one or more business services.\n- Goal/Objective/Service diagrams define the ways in which a service contributes to the achievement of a business vision or strategy. 
guarantee_COMMANDENAME=guarantee
guarantee_ERROR=Guarantee : Requirement -> Goal
guarantee_NAME=Guarantee
guarantee_TOOLTYPE=Requirement -> Goal
HardwareTechnologyComponent_COMMANDENAME=HardwareTechnologyComponent
HardwareTechnologyComponent_ERROR=Invalid owner element : Technology Component
HardwareTechnologyComponent_NAME=Technology Component
HardwareTechnologyComponent_TOOLTYPE=Technology Component
HeadquarterLocation_COMMANDENAME=HeadquarterLocation
HeadquarterLocation_ERROR=Invalid owner element : Headquarter
HeadquarterLocation_NAME=Headquarter
HeadquarterLocation_TOOLTYPE=Headquarter
implement_COMMANDENAME=Implement
implement_ERROR=Implement : Process/Class -> Business Rule
implement_NAME=Implement
implement_TOOLTYPE=Process/Class -> Business Rule
InformationDomain_COMMANDENAME=InformationDomain
InformationDomain_ERROR=Invalid owner element : Information Domain
InformationDomain_NAME=Information Domain
InformationDomain_TOOLTYPE=Information Domain
Initiator_COMMANDENAME=Initiator
Initiator_ERROR=Initiator of : Role/Actor/Organization Unit -> Process
Initiator_NAME=Initiator of
Initiator_TOOLTYPE=Role/Actor/Organization Unit -> Process
InteractionApplicationComponent_COMMANDENAME=InteractionApplicationComponent
InteractionApplicationComponent_ERROR=Invalid owner element : Interaction Component
InteractionApplicationComponent_NAME=Interaction Component
InteractionApplicationComponent_TOOLTYPE=Interaction Component
IntermediaryApplicationComponent_COMMANDENAME=IntermediaryApplicationComponent
IntermediaryApplicationComponent_ERROR=Invalid owner element : Intermediary Component
IntermediaryApplicationComponent_NAME=Intermediary Component
IntermediaryApplicationComponent_TOOLTYPE=Intermediary Component
IOFlow_COMMANDENAME=IOFlow
IOFlow_ERROR=Flow : Any active element<-->Product/Entity/Event
IOFlow_habilitation_NAME=Habilitation
IOFlow_NAME=Flow
IOFlow_TOOLTYPE=Any active element<-->Product/Entity/Event
Layer_COMMANDENAME=Layer
Layer_ERROR=Invalid owner element : Layer
Layer_NAME=Layer
Layer_TOOLTYPE=Layer
Locations_Template=This domains gathers the locations of the company. Headquarter and ocations are defined. Then, it will be possible to deploy roles, actors, devices (servers, network, ..), and application components on these locations.
LogicalDataModel_COMMANDENAME=LogicalDataModel
LogicalDataModel_ERROR=Invalid owner element : Data Architecture
LogicalDataModel_NAME=Data Architecture
LogicalDataModel_TOOLTYPE=Data Architecture
measure_COMMANDENAME=Measure
measure_ERROR=Measure : Model Element -> Goal
Measure_NAME=Measure
measure_NAME=Measure
measure_TOOLTYPE=Model Element -> Goal
Migration_COMMANDENAME=Migrate
Migration_ERROR=Invalid owner element : Migrate
Migration_NAME=Migrate
Migration_TOOLTYPE=Migrate
Name_NAME=Name
NetworkLink_COMMANDENAME=NetworkLink
NetworkLink_ERROR=Network Link : Technology Architecture Element/Technology Architecture Element
NetworkLink_NAME=Network Link
NetworkLink_TOOLTYPE=Network Link : Technology Architecture Element/Technology Architecture Element
Organization_Template=Under the Organization domain, we will define the organization units of the enterprise, its roles and actors. We recommend to focus more on role modeling than on actor modeling, since the model will be of a higher level, and more stable.\n\nDiagrams:\nUse Organization role diagram to express the definition of participants and their responsabilities.\nUse Organization decomposition diagram to describe the links between actor, roles, and location (which shall be already defined in the \u0022Locations\u0022 domain) within an organization tree
OrganizationParticipant_COMMANDENAME=OrganizationParticipant
OrganizationParticipant_ERROR=Invalid owner element : Organization Participant
OrganizationParticipant_NAME=Organization Participant
OrganizationParticipant_TOOLTYPE=Organization Participant
Owner_COMMANDENAME=Owner
Owner_ERROR=Owner of : Role/Actor/Organization Unit -> Process/Service
Owner_NAME=Owner of
Owner_TOOLTYPE=Role/Actor/Organization Unit -> Process/Service
Part_COMMANDENAME=Part
Part_ERROR=Invalid owner element : Part
Part_NAME=Part
Part_TOOLTYPE=Function <--> Function
Participates_COMMANDENAME=Participates
Participates_ERROR=Participates in : Role/Actor/Organization Unit -> Process/Service/Service Operation
Participates_NAME=Participates in
Participates_TOOLTYPE=Role/Actor/Organization Unit -> Process/Service/Service Operation
PostCondition_COMMANDENAME=PostCondition
PostCondition_ERROR=Invalid owner element : Postcondition
PostCondition_NAME=Postcondition
PostCondition_TOOLTYPE=Postcondition
PreCondition_COMMANDENAME=PreCondition
PreCondition_ERROR=Invalid owner element : Precondition
PreCondition_NAME=Precondition
PreCondition_TOOLTYPE=Precondition
ProcessApplicationComponent_COMMANDENAME=ProcessApplicationComponent
ProcessApplicationComponent_ERROR=Invalid owner element : Process Component
ProcessApplicationComponent_NAME=Process Component
ProcessApplicationComponent_TOOLTYPE=Process Component
Processes_Template=The process domain is the place where business processes are defined and modeled. Business Events or products can be defined there.\n\nDiagrams:\nUse \u0022Event diagrams\u0022 to provide an overview of the different business processes, and do a detailed business process model under each process through process flow diagrams.
Property_Type_NAME=Type
ProvidedServiceAccess_COMMANDENAME=ProvidedServiceAccess
ProvidedServiceAccess_ERROR=Invalid owner element : Provided
ProvidedServiceAccess_NAME=Provided
ProvidedServiceAccess_TOOLTYPE=Provided
PublicApplicationComponent_COMMANDENAME=PublicApplicationComponent
PublicApplicationComponent_ERROR=Invalid owner element : Public Component
PublicApplicationComponent_NAME=Public Component
PublicApplicationComponent_TOOLTYPE=Public Component
refine_COMMANDENAME=Refine
refine_ERROR=Refine : Model Element/Requirement -> Requirement
refine_NAME=Refine
refine_TOOLTYPE=Model Element/Requirement -> Requirement
RequiredServiceAccess_COMMANDENAME=RequiredServiceAccess
RequiredServiceAccess_ERROR=Invalid owner element : Required
RequiredServiceAccess_NAME=Required
RequiredServiceAccess_TOOLTYPE=Required
Responsible_COMMANDENAME=Responsible
Responsible_ERROR=Responsible of : Role/Actor -> Role/Actor/Organization Unit
Responsible_NAME=Responsible of
Responsible_TOOLTYPE=Role/Actor -> Role/Actor/Organization Unit
satisfy_COMMANDENAME=Satisfy
satisfy_ERROR=Satisfy : Model Element -> Requirement
satisfy_NAME=Satisfy
satisfy_TOOLTYPE=Model Element -> Requirement
Service_Template=The \u0022Service Data\u0022 domain contains the model of messages and message fragments. These messages constitute the information exchanged between IS services. Modelio can generate XSD schema from this model. Messeges will be used as types service parameters.
ServiceAccess_COMMANDENAME=ServiceAccess
ServiceAccess_ERROR=Invalid owner element : Service Access
ServiceAccess_NAME=Service Access
ServiceAccess_TOOLTYPE=Service Access
ServiceApplicationComponent_COMMANDENAME=ServiceApplicationComponent
ServiceApplicationComponent_ERROR=Invalid owner element : Service Component
ServiceApplicationComponent_NAME=Service Component
ServiceApplicationComponent_TOOLTYPE=Service Component
ServiceData_COMMANDENAME=ServiceData
ServiceData_ERROR=Invalid owner element : Message
ServiceData_NAME=Message
ServiceData_TOOLTYPE=Message
ServiceDataDiagram_COMMANDENAME=ServiceDataDiagram
ServiceDataDiagram_ERROR=Invalid owner element : Logical Data diagram
ServiceDataDiagram_NAME=Logical Data diagram
ServiceDataDiagram_TOOLTYPE=Logical Data diagram
ServiceDataFragment_COMMANDENAME=ServiceDataFragment
ServiceDataFragment_ERROR=Invalid owner element : Message Fragment
ServiceDataFragment_NAME=Message Fragment
ServiceDataFragment_TOOLTYPE=Message Fragment
ServiceProcessSupport_COMMANDENAME=ServiceProcessSupport
ServiceProcessSupport_ERROR=Supports : Service/Service Access/Process/Component -> Service/Process
ServiceProcessSupport_NAME=Supports
ServiceProcessSupport_TOOLTYPE=Service/Service Access/Process/Component -> Service/Process
SoftwareDistribution_COMMANDENAME=SoftwareDistribution
SoftwareDistribution_NAME=Software Distribution diagram
SoftwareDistribution_TOOLTYPE=Software Distribution diagram
SoftwareDistributionDiagram_NOTE=\nThe purpose of Software Distribution diagrams is to define TOGAF Software Distribution
SoftwareDistributionDiagram_SHORTNOTE=The purpose of Software Distribution diagrams is to define TOGAF Software Distribution
SoftwareEngineering_COMMANDENAME=SoftwareEngineering
SoftwareEngineering_NAME=Software Engineering diagram
SoftwareEngineering_TOOLTYPE=Software Engineering diagram
SoftwareEngineeringDiagram_NOTE=\nThe purpose of Software Engineering diagrams is to define TOGAF Software Engineering
SoftwareEngineeringDiagram_SHORTNOTE=The purpose of Software Engineering diagrams is to define TOGAF Software Engineering
SofwareDistributionDiagram_COMMANDENAME=SofwareDistributionDiagram
SofwareDistributionDiagram_ERROR=Invalid owner element : Software Distribution diagram
SofwareDistributionDiagram_NAME=Software Distribution diagram
SofwareDistributionDiagram_TOOLTYPE=Software Distribution diagram
SystemApplicationComponent_COMMANDENAME=SystemApplicationComponent
SystemApplicationComponent_ERROR=Invalid owner element : System
SystemApplicationComponent_NAME=System
SystemApplicationComponent_TOOLTYPE=System
Systeme_Template=System Uses Cases are modeled here.  Roles or actos can be related to Use case. Application component that realize the Use Case can also be shown with a \u0022component realization dependency.
TechnologyArchitecture_COMMANDENAME=TechnologyArchitecture
TechnologyArchitecture_ERROR=Invalid owner element : Technology Architecture
TechnologyArchitecture_NAME=Technology Architecture
TechnologyArchitecture_Template=Devices or technology artifacts can be created under the technology architecture. Elements deployed under the devices (typically servers and workstations) will be modeled under this domain.\n\nDiagrams:\n- Environments and Locations diagrams depict which locations host which applications, identifies what technologies and/or applications are used at which locations, and finally identifies the locations from which business users typically interact with the applications.\n- Software Distribution diagrams show how application software is structured and distributed across the estate.\n- Platform Decomposition diagrams depict the technology platform that supports the operations of the Information Systems Architecture. \n- Network computing hardware diagrams show the as deployed logical view of logical application components in a distributed network computing environment.\n- Processing diagrams focus on deployable units of code/configuration and how these are deployed onto the technology platform.
TechnologyArchitecture_TOOLTYPE=Technology Architecture
TechnologyArchitectureDomain_COMMANDENAME=TechnologyArchitectureDomain
TechnologyArchitectureDomain_ERROR=Invalid owner element : Technology Domain
TechnologyArchitectureDomain_NAME=Technology Domain
TechnologyArchitectureDomain_TOOLTYPE=Technology Domain
TechnologyArtifact_COMMANDENAME=TechnologyArtifact
TechnologyArtifact_ERROR=Invalid owner element : Technology Artifact
TechnologyArtifact_NAME=Technology Artifact
TechnologyArtifact_TOOLTYPE=Technology Artifact
TogafActor_COMMANDENAME=TogafActor
TogafActor_ERROR=Invalid owner element : Actor
TogafActor_NAME=Actor
TogafActor_TOOLTYPE=Actor
TogafApplication_COMMANDENAME=TogafApplication
TogafApplication_ERROR=Invalid owner element : Application
TogafApplication_NAME=Application
TogafApplication_TOOLTYPE=Application
TogafApplicationAndUserLocationDiagram_COMMANDENAME=TogafApplicationAndUserLocationDiagram
TogafApplicationAndUserLocationDiagram_ERROR=Invalid owner element : Application and User Location diagram
TogafApplicationAndUserLocationDiagram_NAME=Application and User Location diagram
TogafApplicationAndUserLocationDiagram_TOOLTYPE=Application and User Location diagram
TogafApplicationCommunicationDiagram_COMMANDENAME=TogafApplicationCommunicationDiagram
TogafApplicationCommunicationDiagram_ERROR=Invalid owner element : Application Communication diagram
TogafApplicationCommunicationDiagram_NAME=Application Communication diagram
TogafApplicationCommunicationDiagram_TOOLTYPE=Application Communication diagram
TogafApplicationComponent_benefits_NAME=Benefits
TogafApplicationComponent_COMMANDENAME=TogafApplicationComponent
TogafApplicationComponent_complexity_NAME=Complexity
TogafApplicationComponent_ERROR=Invalid owner element : Application Component
TogafApplicationComponent_NAME=Application component
TogafApplicationComponent_size_NAME=Size
TogafApplicationComponent_TogafApplicationComponent_level_NAME=Level
TogafApplicationComponent_TOOLTYPE=Application Component
TogafApplicationComponentInstance_capacity_NAME=Capacity
TogafApplicationComponentInstance_COMMANDENAME=TogafApplicationComponentInstance
TogafApplicationComponentInstance_ERROR=Invalid owner element : Application Instance
TogafApplicationComponentInstance_NAME=Application Instance
TogafApplicationComponentInstance_occurencesNumber_NAME=Occurences Number
TogafApplicationComponentInstance_TOOLTYPE=Application Instance
TogafApplicationMigrationDiagram_COMMANDENAME=TogafApplicationMigrationDiagram
TogafApplicationMigrationDiagram_ERROR=Invalid owner element : Application Migration diagram
TogafApplicationMigrationDiagram_NAME=Application Migration diagram
TogafApplicationMigrationDiagram_NOTE=\nThe Application Migration diagram identifies application migration from baseline to target application components. It enables a more accurate estimation of migration costs by showing precisely which applications and interfaces need to be mapped between migration stages.\nUnder Modelio : One strategy is to model the global Information system as a system application component for each of its state. Under the context of each version of the system, instances of application components will be created (just drag & drop application components under the system component). This allows showing several instances of identical components deployed in several versions of the IS. Between these instances, \u0022migration\u0022 dependencies are drawn. The model can be more accurate, and focused for example on different versions of services on different occurrences of application components.
TogafApplicationMigrationDiagram_SHORTNOTE=The Application Migration diagram identifies application migration from baseline to target application components.
TogafApplicationMigrationDiagram_TOOLTYPE=Application Migration diagram
TogafBenefitsDiagram_COMMANDENAME=TogafBenefitsDiagram
TogafBenefitsDiagram_ERROR=Invalid owner element : Benefits diagram
TogafBenefitsDiagram_NAME=Benefits diagram
TogafBenefitsDiagram_NOTE=\nThe Benefits diagram shows opportunities identified in an architecture definition, classified according to their relative size, benefit, and complexity. This diagram can be used by stakeholders to make selection, prioritization, and sequencing decisions on identified opportunities.\nBenefit diagrams are similar to application communication diagrams. They are annotated with notes, to document the benefits of the designed application components. Use also the properties : SIze, Benefits, and Complexity of application components.
TogafBenefitsDiagram_SHORTNOTE=The Benefits diagram shows opportunities identified in an architecture definition, classified according to their relative size, benefit, and complexity. 
TogafBenefitsDiagram_TOOLTYPE=Benefits diagram
TogafBus_COMMANDENAME=TogafBus
TogafBus_ERROR=Invalid owner element : Bus
TogafBus_NAME=Bus
TogafBus_TOOLTYPE=Bus
TogafBusinessCapability_COMMANDENAME=TogafBusinessCapability
TogafBusinessCapability_ERROR=Invalid owner element : Business Capability
TogafBusinessCapability_NAME=Business Capability
TogafBusinessCapability_TOOLTYPE=Business Capability
TogafBusinessFootPrintDiagram_COMMANDENAME=TogafBusinessFootPrintDiagram
TogafBusinessFootPrintDiagram_ERROR=Invalid owner element : functional decomposition diagram
TogafBusinessFootPrintDiagram_NAME=Business Footprint diagram
TogafBusinessFootPrintDiagram_NOTE=\nA Business Footprint diagram describes the links between business goals, organizational units, business functions, and services, and maps these functions to the technical components delivering the required capability.\nA Business Footprint diagram provides a clear traceability between a technical component and the business goal that it satisfies, whilst also demonstrating ownership of the services identified.\nA Business Footprint diagram demonstrates only the key facts linking organization unit functions to delivery services and is utilized as a communication platform for senior-level (CxO) stakeholders.\nUnder Modelio : select in the explorer the elements (Goals, Organization Units, Business Functions, Business Services, Applications Components) that are under focus and shall be already defined.  Drag & drop them, create \u0022trace\u0022, \u0022participates in\u0022 , \u0022supports\u0022 and \u0022component realization\u0022 dependencies.
TogafBusinessFootPrintDiagram_SHORTNOTE=A Business Footprint diagram describes the links between business goals, organizational units, business functions, and services, and maps these functions to the technical components delivering the required capability.
TogafBusinessFootPrintDiagram_TOOLTYPE=Business Footprint diagram
TogafBusinessOperation_COMMANDENAME=TogafBusinessOperation
TogafBusinessOperation_ERROR=Invalid owner element : Operation
TogafBusinessOperation_NAME=Operation
TogafBusinessOperation_TOOLTYPE=Operation
TogafBusinessService_COMMANDENAME=TogafBusinessService
TogafBusinessService_ERROR=Invalid owner element : Business Service
TogafBusinessService_NAME=Business Service
TogafBusinessService_TOOLTYPE=Business Service
TogafBusinessServiceInformationDiagram_COMMANDENAME=TogafBusinessServiceInformationDiagram
TogafBusinessServiceInformationDiagram_ERROR=Invalid owner element : Business Service Information diagram
TogafBusinessServiceInformationDiagram_NAME=Business Service Information diagram
TogafBusinessServiceInformationDiagram_NOTE=\nThe Business Service/Information diagram shows the information needed to support one or more business services. The Business Service/Information diagram shows what data is consumed by or produced by a business service and may also show the source of information. The Business Service/Information diagram shows an initial representation of the information present within the architecture and therefore forms a basis for elaboration and refinement within Phase C (Data Architecture).\nHints : by using \u0022flow\u0022 dependencies between  business services and Business Entities, this diagram represents which kind of entity is used or produced by the services. \nUnder Modelio : drag and drop business services and Business Entities from the explorer, and draw \u0022flow\u0022 dependencies between them to express inputs or outputs. Flow properties provide the means to specify the input or output orientation.
TogafBusinessServiceInformationDiagram_SHORTNOTE=\nThe Business Service/Information diagram shows the information needed to support one or more business services.
TogafBusinessServiceInformationDiagram_TOOLTYPE=Business Service Information diagram
TogafBusinessUseCaseDiagram_COMMANDENAME=TogafBusinessUseCaseDiagram
TogafBusinessUseCaseDiagram_ERROR=Invalid owner element : Business Use Case diagram
TogafBusinessUseCaseDiagram_NAME=Business Use Case diagram
TogafBusinessUseCaseDiagram_TOOLTYPE=Business Use Case diagram
TogafClassDiagram_COMMANDENAME=TogafClassDiagram
TogafClassDiagram_ERROR=Invalid owner element : Class diagram
TogafClassDiagram_NAME=Class diagram
TogafClassDiagram_TOOLTYPE=Class diagram
TogafClassHierachyDiagram_COMMANDENAME=TogafClassHierachyDiagram
TogafClassHierachyDiagram_ERROR=Invalid owner element : Class Hierarchy diagram
TogafClassHierachyDiagram_NAME=Class Hierarchy diagram
TogafClassHierachyDiagram_NOTE=\nThe purpose of the Class Hierarchy diagram is to show the technical stakeholders a perspective of the class hierarchy. The advantage of this diagram is that it allows the stakeholders a technical utilization/usage diagram of the data entity. This diagram gives the stakeholders an idea of who is using the data, how, why, and when. A possible variant can be to use this diagram in auditing.\nClass Hierarchy diagram is a kind of class diagram, focused on the hierarchy.
TogafClassHierachyDiagram_SHORTNOTE=The purpose of the Class Hierarchy diagram is to show the technical stakeholders a perspective of the class hierarchy. 
TogafClassHierachyDiagram_TOOLTYPE=Class Hierarchy diagram
TogafCommunicationEngineeringDiagrams_COMMANDENAME=TogafCommunicationEngineeringDiagrams
TogafCommunicationEngineeringDiagrams_ERROR=Invalid owner element : Communication Engineering diagram
TogafCommunicationEngineeringDiagrams_NAME=Communication Engineering diagram
TogafCommunicationEngineeringDiagrams_NOTE=\nThe Communications Engineering diagram describes the means of communication, the method of sending and receiving information between these assets in the Technology Architecture; insofar as the selection of package solutions in the preceding architectures put specific requirements on the communications between the applications. The Communications Engineering diagram will take logical connections between client and server components and identify network boundaries and network infrastructure required to physically implement those connections. It does not describe the information format or content, but will address protocol and capacity issues.\nSee NewtorkComputingHardware Diagram: the focus is set here on communications.
TogafCommunicationEngineeringDiagrams_SHORTNOTE=The Communications Engineering diagram describes the means of communication, the method of sending and receiving information between these assets in the Technology Architecture; insofar as the selection of package solutions in the preceding architectures put specific requirements on the communications between the applications. 
TogafCommunicationEngineeringDiagrams_TOOLTYPE=Communication Engineering diagram
TogafConsumes_COMMANDENAME=TogafConsumes
TogafConsumes_ERROR=Consumes : Role/Actor/Organization Unit -> Operation/Service/Component
TogafConsumes_habilitation_NAME=Habilitation
TogafConsumes_NAME=Consumes
TogafConsumes_TOOLTYPE=Role/Actor/Organization Unit -> Operation/Service/Component
TogafDataDisseminationDiagram_COMMANDENAME=TogafDataDisseminationDiagram
TogafDataDisseminationDiagram_ERROR=Invalid owner element : Data Dissemination diagram
TogafDataDisseminationDiagram_NAME=Data Dissemination diagram
TogafDataDisseminationDiagram_NOTE=\nThe purpose of the Data Dissemination diagram is to show the relationship between data entities, business services, and application components. The diagram shows how the logical entities are to be physically realized by application components. This allows effective sizing to be carried out and the IT footprint to be refined. Moreover, by assigning business value to data, an indication of the business criticality of application components can be gained. Additionally, the diagram may show data replication and system ownership of the master reference for data. In this instance, it can show two copies and the master-copy relationship between them. This diagram can include services; that is, services encapsulate data and they reside in an application, or services that reside on an application and access data encapsulated within the application\nUnder Modelio : Data dissemination diagram is a kind of architecture diagram, where data entities are connected to application components. First, drag & drop application components from the Application Architecture, and then drag and drop Business Entities, either within the application components to show their localization, or beside them, with dependency links.
TogafDataDisseminationDiagram_SHORTNOTE=The purpose of the Data Dissemination diagram is to show the relationship between data entities, business services, and application components. 
TogafDataDisseminationDiagram_TOOLTYPE=Data Dissemination diagram
TogafDataLifeCycleDiagram_COMMANDENAME=TogafDataLifeCycleDiagram
TogafDataLifeCycleDiagram_ERROR=Invalid owner element : Data Lifecycle diagram
TogafDataLifeCycleDiagram_NAME=Data Lifecycle diagram
TogafDataLifeCycleDiagram_TOOLTYPE=Data Lifecycle diagram
TogafDataMigrationDiagram_COMMANDENAME=TogafDataMigrationDiagram
TogafDataMigrationDiagram_ERROR=Invalid owner element : data Migration diagram
TogafDataMigrationDiagram_NAME=Data Migration diagram
TogafDataMigrationDiagram_NOTE=\nThe purpose of the Data Migration diagram is to show the flow of data from the source to the target applications. The diagram will provide a visual representation of the spread of sources/targets and serve as a tool for data auditing and establishing traceability. This diagram can be elaborated or enhanced as detailed as necessary. For example, the diagram can contain just an overall layout of migration landscape or could go into individual application metadata element level of detail.\nHints : Data migration can be expressed at the conceptual level, logical or physical. It can also use application communication diagrams to express the data migration. The \u0022migrate\u0022 dependency is the key element to formalize migration.\nUnder Modelio : Use the previous data model (which should be in a separated information domain), drag and drop previous and new entities, and use the \u0022migrates\u0022 dependency to express how previous data is translated into new entities.
TogafDataMigrationDiagram_SHORTNOTE=The purpose of the Data Migration diagram is to show the flow of data from the source to the target applications.
TogafDataMigrationDiagram_TOOLTYPE=Data Migration diagram
TogafDataSecurityDiagram_COMMANDENAME=TogafDataSecurityDiagram
TogafDataSecurityDiagram_ERROR=Invalid owner element : Data Security diagram
TogafDataSecurityDiagram_NAME=Data Security diagram
TogafDataSecurityDiagram_NOTE=\nData is considered as an asset to the enterprise and data security simply means ensuring that enterprise data is not compromised and that access to it is suitably controlled. The purpose of the Data Security diagram is to depict which actor (person, organization, or system) can access which enterprise data. This relationship can be shown in a matrix form between two objects or can be shown as a mapping. The diagram can also be used to demonstrate compliance with data privacy laws and other applicable regulations (HIPAA, SOX, etc). This diagram should also consider any trust implications where an enterprise\u0027s partners or other parties may have access to the company\u0027s systems, such as an outsourced situation where information may be managed by other people and may even be hosted in a different country.\nHints : Large diagrams can become hard to read. It is recommended to do data security diagrams per business entity, and/or per participant (role typically).\nUnder Modelio : drag and drop data (Business Entities, data entities) you want to show, drag and drop roles or actor involved with these entities and express using and valuating \u0022flow\u0022 dependencies the access mode of each participant to each entity.
TogafDataSecurityDiagram_SHORTNOTE=Data is considered as an asset to the enterprise and data security simply means ensuring that enterprise data is not compromised and that access to it is suitably controlled. 
TogafDataSecurityDiagram_TOOLTYPE=Data Security diagram
TogafDiagram_COMMANDENAME=TogafDiagram
TogafDiagram_ERROR=Invalid owner element : TOGAF diagram
TogafDiagram_NAME=TOGAF diagram
TogafDiagram_TOOLTYPE=Create a TOGAF diagram
TogafElement_category_NAME=Category
TogafElement_description_NAME=Description
TogafElement_name_NAME=Name
TogafElement_owner_NAME=Owner
TogafElement_reference_NAME=Reference
TogafElement_reference_NAME=Reference
TogafElement_source_NAME=Source
TogafEnterpriseManageabilityDiagram_COMMANDENAME=TogafEnterpriseManageabilityDiagram
TogafEnterpriseManageabilityDiagram_ERROR=Invalid owner element : Enterprise Manageability diagram
TogafEnterpriseManageabilityDiagram_NAME=Enterprise Manageability diagram
TogafEnterpriseManageabilityDiagram_NOTE=\nThe Enterprise Manageability diagram shows how one or more applications interact with application and technology components that support operational management of a solution. This diagram is really a filter on the Application Communication diagram, specifically for enterprise management class software. Analysis can reveal duplication and gaps, and opportunities in the IT service management operation of an organization. It would identify temporary applications, staging areas, and the infrastructure required to support migrations (for example, parallel run environments, etc).\nUnder Modelio : The usage is similar to Application communication diagrams, where some application components and their properties are dragged and dropped from the explorer. The \u0022migrates\u0022 dependency is frequently used there.
TogafEnterpriseManageabilityDiagram_SHORTNOTE=The Enterprise Manageability diagram shows how one or more applications interact with application and technology components that support operational management of a solution.
TogafEnterpriseManageabilityDiagram_TOOLTYPE=Enterprise Manageability diagram
TogafEnterpriseSystem_COMMANDENAME=TogafEnterpriseSystem
TogafEnterpriseSystem_ERROR=Invalid owner element : Enterprise System
TogafEnterpriseSystem_NAME=Enterprise System
TogafEnterpriseSystem_TOOLTYPE=Enterprise System
TogafEnumeration_COMMANDENAME=TogafEnumeration
TogafEnumeration_ERROR=Invalid owner element : Enumeration
TogafEnumeration_NAME=Enumeration
TogafEnumeration_TOOLTYPE=Enumeration 
TogafEnvironmentAndLocationsDiagram_COMMANDENAME=TogafEnvironmentAndLocationsDiagram
TogafEnvironmentAndLocationsDiagram_ERROR=Invalid owner element : Environment and Locations diagram
TogafEnvironmentAndLocationsDiagram_NAME=Environment and Locations diagram
TogafEnvironmentAndLocationsDiagram_NOTE=\nEnvironments and Locations diagram depicts which locations host which applications, identifies what technologies and/or applications are used at which locations, and finally identifies the locations from which business users typically interact with the applications. This diagram should also show the existence and location of different deployment environments, including non-production environments, such as development and pre production.\nUnder Modelio : Drag & drop the locations of the enterprise, and then drag and drop the material (typically the servers) under the locations, and then drag & drop the application components, or software elements under the material. Typically, this diagram represents where is located each server, and on which server is executed which application.
TogafEnvironmentAndLocationsDiagram_SHORTNOTE=Environments and Locations diagram depicts which locations host which applications, identifies what technologies and/or applications are used at which locations, and finally identifies the locations from which business users typically interact with the applications. 
TogafEnvironmentAndLocationsDiagram_TOOLTYPE=Environment and Locations diagram
TogafEvent_COMMANDENAME=TogafEvent
TogafEvent_ERROR=Invalid owner element : Event
TogafEvent_NAME=Event
TogafEvent_TOOLTYPE=Event
TogafEventDiagram_COMMANDENAME=TogafEventDiagram
TogafEventDiagram_ERROR=Invalid owner element : Event diagram
TogafEventDiagram_NAME=Event diagram
TogafEventDiagram_TOOLTYPE=Event diagram
TogafExternalActor_COMMANDENAME=TogafExternalActor
TogafExternalActor_ERROR=Invalid owner element : External Actor
TogafExternalActor_NAME=External Actor
TogafExternalActor_TOOLTYPE=External Actor
TogafExternalRole_COMMANDENAME=TogafExternalRole
TogafExternalRole_ERROR=Invalid owner element : External Role
TogafExternalRole_NAME=External Role
TogafExternalRole_TOOLTYPE=External Role
TogafFunction_changesNeeded_NAME=Changes Needed
TogafFunction_COMMANDENAME=TogafFunction
TogafFunction_ERROR=Invalid owner element : Function
TogafFunction_increments_NAME=Increments
TogafFunction_NAME=Function
TogafFunction_TOOLTYPE=Function
TogafFunction_valueFactor_NAME=Value Factor
TogafFunctionalDecompositionDiagram_COMMANDENAME=TogafFunctionalDecompositionDiagram
TogafFunctionalDecompositionDiagram_ERROR=Invalid owner element : Togaf Functional Decomposition diagram
TogafFunctionalDecompositionDiagram_NAME=Functional Decomposition diagram
TogafFunctionalDecompositionDiagram_TOOLTYPE=Togaf Functional Decomposition diagram
TogafFunctionSequence_COMMANDENAME=TogafFunctionSequence
TogafFunctionSequence_ERROR=Sequence : Function -> Function
TogafFunctionSequence_NAME=Sequence
TogafFunctionSequence_TOOLTYPE=Function -> Function
TogafGoalObjectiveServiceDiagram_COMMANDENAME=TogafGoalObjectiveServiceDiagram
TogafGoalObjectiveServiceDiagram_ERROR=Invalid owner element : Driver/Goal/Objectives diagram
TogafGoalObjectiveServiceDiagram_NAME=Driver/Goal/Objectives diagram
TogafGoalObjectiveServiceDiagram_NOTE=\nThe purpose of a Goal/Objective/Service diagram is to define the ways in which a service contributes to the achievement of a business vision or strategy. \nServices are associated with the drivers, goals, objectives, and measures that they support, allowing the enterprise to understand which services contribute to similar aspects of business performance. The Goal/Objective/Service diagram also provides qualitative input on what constitutes high performance for a particular service.\nUnder Modelio: drag & drop business services and goals, and define \u0022trace\u0022 dependencies between services and goals where appropriate.
TogafGoalObjectiveServiceDiagram_SHORTNOTE=\nThe purpose of a Goal/Objective/Service diagram is to define the ways in which a service contributes to the achievement of a business vision or strategy.
TogafGoalObjectiveServiceDiagram_TOOLTYPE=Driver/Goal/Objectives diagram
TogafInternalActor_COMMANDENAME=TogafInternalActor
TogafInternalActor_ERROR=Invalid owner element : Internal Actor
TogafInternalActor_NAME=Internal Actor
TogafInternalActor_TOOLTYPE=Internal Actor
TogafInternalRole_COMMANDENAME=TogafInternalRole
TogafInternalRole_ERROR=Invalid owner element : Internal Role
TogafInternalRole_NAME=Internal Role
TogafInternalRole_TOOLTYPE=Internal Role
TogafISService_COMMANDENAME=TogafISService
TogafISService_ERROR=Invalid owner element : IS Service
TogafISService_NAME=IS Service
TogafISService_TOOLTYPE=IS Service
TogafISServiceOperation_COMMANDENAME=TogafISServiceOperation
TogafISServiceOperation_ERROR=Invalid owner element : IS Service Operation
TogafISServiceOperation_NAME=IS Service Operation
TogafISServiceOperation_TOOLTYPE=IS Service Operation
TogafLocalization_COMMANDENAME=TogafLocalization
TogafLocalization_ERROR=Localization : Role/Actor/Organization Unit -> Location
TogafLocalization_NAME=Localization
TogafLocalization_TOOLTYPE=Role/Actor/Organization Unit -> Location
TogafLocation_category_NAME=Category
TogafLocation_COMMANDENAME=TogafLocation
TogafLocation_ERROR=Invalid owner element : Location
TogafLocation_NAME=Location
TogafLocation_TOOLTYPE=Location
TogafLocationDiagram_COMMANDENAME=TogafLocationDiagram
TogafLocationDiagram_ERROR=Invalid owner element : Location diagram
TogafLocationDiagram_NAME=Location diagram
TogafLocationDiagram_TOOLTYPE=Location diagram
TogafMatrixDiagram_COMMANDENAME=TogafMatrixDiagram
TogafMatrixDiagram_ERROR=Invalid owner element : Traceability diagram
TogafMatrixDiagram_NAME=Traceability diagram
TogafMatrixDiagram_TOOLTYPE=Traceability diagram
TogafNewtorkComputingHardwareDiagram_COMMANDENAME=TogafNewtorkComputingHardwareDiagram
TogafNewtorkComputingHardwareDiagram_ERROR=Invalid owner element : Network Computing Hardware diagram
TogafNewtorkComputingHardwareDiagram_NAME=Network Computing Hardware diagram
TogafNewtorkComputingHardwareDiagram_TOOLTYPE=Network Computing Hardware diagram
TogafOrganizationDecompositionDiagram_COMMANDENAME=TogafOrganizationDecompositionDiagram
TogafOrganizationDecompositionDiagram_ERROR=Invalid owner element : Organization Decomposition diagram
TogafOrganizationDecompositionDiagram_NAME=Organization Decomposition diagram
TogafOrganizationDecompositionDiagram_TOOLTYPE=Organization Decomposition diagram
TogafOrganizationRoleDiagram_COMMANDENAME=OrganizationRoleDiagram
TogafOrganizationRoleDiagram_ERROR=Invalid owner element : Organization Role diagram
TogafOrganizationRoleDiagram_NAME=Organization Role diagram
TogafOrganizationRoleDiagram_NOTE=\nDiagram dedicated to the definition of participants and their responsibilities. Roles and actors are modeled here. This is an extension to TOGAF: the organization is presented in terms of connections between roles and responsibilities.\nUnder Modelio: Define the roles of the Organization, define Organization Units, define the dependencies between roles (communication, hierarchy, responsibilities). The assigned goals can also be shown here.
TogafOrganizationRoleDiagram_SHORTNOTE=Diagram dedicated to the definition of participants and their responsibilities. Roles and actors are modeled here. 
TogafOrganizationRoleDiagram_TOOLTYPE=Organization Role diagram
TogafOrganizationUnit_COMMANDENAME=TogafOrganizationUnit
TogafOrganizationUnit_ERROR=Invalid owner element : Organization Unit
TogafOrganizationUnit_NAME=Organization Unit
TogafOrganizationUnit_TOOLTYPE=Organization Unit
TogafParticipantAllocation_COMMANDENAME=TogafParticipantAllocation
TogafParticipantAllocation_ERROR=Allocated to : Role/Actor -> Organization Unit
TogafParticipantAllocation_NAME=Allocated
TogafParticipantAllocation_TOOLTYPE=Role/Actor -> Organization Unit
TogafParticipantDecomposition_COMMANDENAME=TogafParticipantDecomposition
TogafParticipantDecomposition_ERROR=Composed of : Role/Actor -> Role/Actor
TogafParticipantDecomposition_NAME=Composed of
TogafParticipantDecomposition_TOOLTYPE=Role/Actor -> Role/Actor
TogafPlatformDecompositionDiagram_COMMANDENAME=TogafPlatformDecompositionDiagram
TogafPlatformDecompositionDiagram_ERROR=Invalid owner element : Platform Decomposition diagram
TogafPlatformDecompositionDiagram_NAME=Platform decomposition diagram
TogafPlatformDecompositionDiagram_NOTE=\nThe Platform Decomposition diagram depicts the technology platform that supports the operations of the Information Systems Architecture. The diagram covers all aspects of the infrastructure platform and provides an overview of the enterprise\u0027s technology platform. The diagram can be expanded to map the technology platform to appropriate application components within a specific functional or process area. This diagram may show details of specification, such as product versions, number of CPUs, etc., or simply could be an informal eye-char t providing an overview of the technical environment. The diagram should clearly show the enterprise applications and the technology platform for each application area can further be decomposed as follows for Hardware and Software: Logical Technology Components (with attributes), Physical Technology Components (with attributes). Depending upon the scope of the enterprise architecture work, additional technology crossplatform information (e.g., communications, telco, and video information) may be addressed. It is a specific focus on network computing diagrams.\nSee also network computing diagrams.
TogafPlatformDecompositionDiagram_SHORTNOTE=The Platform Decomposition diagram depicts the technology platform that supports the operations of the Information Systems Architecture. 
TogafPlatformDecompositionDiagram_TOOLTYPE=Platform Decomposition diagram
TogafProcess_COMMANDENAME=TogafProcess
TogafProcess_criticality_NAME=Criticality
TogafProcess_duration_NAME=Duration
TogafProcess_ERROR=Invalid owner element : Business Process
TogafProcess_isAutomated_NAME=Is Automated
TogafProcess_kind_NAME=Kind
TogafProcess_KPI_NAME=KPI
TogafProcess_NAME=Business Process
TogafProcess_TOOLTYPE=Business Process
TogafProcess_used_resources_NAME=Used Resources
TogafProcess_volumetrics_NAME=Frequency
TogafProcessFlowDiagram_COMMANDENAME=TogafProcessFlowDiagram
TogafProcessFlowDiagram_ERROR=Invalid owner element : Process Flow diagram
TogafProcessFlowDiagram_NAME=Process Flow diagram
TogafProcessFlowDiagram_TOOLTYPE=Process Flow diagram
TogafProcessingDiagram_COMMANDENAME=TogafProcessingDiagram
TogafProcessingDiagram_ERROR=Invalid owner element : Processing diagram
TogafProcessingDiagram_NAME=Processing diagram
TogafProcessingDiagram_NOTE=\nThe Processing diagram focuses on deployable units of code/configuration and how these are deployed onto the technology platform. A deployment unit represents grouping of business function, service, or application components. The Processing diagram addresses the following:\n- Which set of application components need to be grouped to form a deployment unit\n- How one deployment unit connects/interacts with another (LAN, WAN, and the applicable protocols)\n- How application configuration and usage patterns generate load or capacity requirements for different technology components\nSee NewtorkComputingHardware Diagram. Processing diagram will use deployment in a more generic way, in order to present deployment units. Deployment units can be presented as component instances where application components are deployed, or as physical utility component that will host the deployed application component (for example: an application server).\nAssociations between these deployment units will represent the connection (as for example network), information flows will indicate the nature of information exchanged. \nOn these diagrams, indications about capacity requirements are provided.\nUnder Modelio : Drag & drop application components to deploy them into the deployable units of configuration, which are themself specific kinds of application components, at a logical technology level.
TogafProcessingDiagram_SHORTNOTE=The Processing diagram focuses on deployable units of code/configuration and how these are deployed onto the technology platform.
TogafProcessingDiagram_TOOLTYPE=Processing diagram
TogafProcessSystemRealizationDiagram_COMMANDENAME=TogafProcessSystemRealizationDiagram
TogafProcessSystemRealizationDiagram_ERROR=Invalid owner element : Process System Realization diagram
TogafProcessSystemRealizationDiagram_NAME=Process System Realization diagram
TogafProcessSystemRealizationDiagram_NOTE=\nThe purpose of the Process/System Realization diagram is to clearly depict the sequence of events when multiple applications are involved in executing a business process. It enhances the Application Communication diagram by augmenting it with any sequencing constraints, and hand-off points between batch and real-time processing. It would identify complex sequences that could be simplified, and identify possible rationalization points in the architecture in order to provide more timely information to business users. It may also identify process efficiency improvements that may reduce interaction traffic between applications.\nUnder Modelio : Drag & drop the processes that you want to illustrate, drag & drop the Application components that are involved, and draw \u0022component realization\u0022 dependencies. Indications of role or order can be made using information flows (as in the example), or notes attached to elements. 
TogafProcessSystemRealizationDiagram_SHORTNOTE=\nThe purpose of the Process/System Realization diagram is to clearly depict the sequence of events when multiple applications are involved in executing a business process. 
TogafProcessSystemRealizationDiagram_TOOLTYPE=Process System Realization diagram
TogafProduct_COMMANDENAME=TogafProduct
TogafProduct_ERROR=Invalid owner element : Product
TogafProduct_NAME=Product
TogafProduct_TOOLTYPE=Product
TogafProductLifeCycleDiagram_COMMANDENAME=TogafProductLifeCycleDiagram
TogafProductLifeCycleDiagram_ERROR=Invalid owner element : Product Lifecycle diagram
TogafProductLifeCycleDiagram_NAME=Product Lifecycle diagram
TogafProductLifeCycleDiagram_TOOLTYPE=Product Lifecycle diagram
TogafProjectContextDiagram_COMMANDENAME=TogafProjectContextDiagram
TogafProjectContextDiagram_ERROR=Invalid owner element : Project Context diagram
TogafProjectContextDiagram_NAME=Project Context diagram
TogafProjectContextDiagram_NOTE=\nA Project Context diagram shows the scope of a work package to be implemented as a part of a broader transformation roadmap. The Project Context diagram links a work package to the organizations, functions, services, processes, applications, data, and technology that will be added, removed, or impacted by the project. The Project Context diagram is also a valuable tool for project portfolio management and project mobilization.\nUnder Modelio : Drag & drop the essential application component of the project, the main requirements, the related business processes, business interfaces, business functions, and express what requirement are satisfied by the project, which business processes are implemented, which functions are related, and which roles will use the targeted components. Relationships to other parts of the IS can also be expressed.
TogafProjectContextDiagram_SHORTNOTE=A Project Context diagram shows the scope of a work package to be implemented as a part of a broader transformation roadmap. 
TogafProjectContextDiagram_TOOLTYPE=Project Context diagram
TogafRole_COMMANDENAME=TogafRole
TogafRole_ERROR=Invalid owner element : External Role
TogafRole_NAME=External Role
TogafRole_SkillsRequirements_NAME=Skills Requirements
TogafRole_TOOLTYPE=External Role
TogafService_businessImportance_NAME=Business Importance
TogafService_COMMANDENAME=TogafService
TogafService_contract_NAME=Contract
TogafService_ERROR=Invalid owner element : Service
TogafService_growth_NAME=Growth
TogafService_growthPeriod_NAME=Growth Period
TogafService_NAME=Service
TogafService_peakProfileLongTerm_NAME=Peak Profile Long Term
TogafService_peakProfileShortTerm_NAME=Peak Profile Short Term
TogafService_QOS_NAME=QOS
TogafService_RACI_NAME=RACI
TogafService_serviceTimes_NAME=Service Times
TogafService_SLA_NAME=SLA
TogafService_TOOLTYPE=Service
TogafService_troughput_NAME=Troughput
TogafService_troughputPeriod_NAME=Troughput Period
TogafService_type_NAME=Type
TogafServiceContract_COMMANDENAME=TogafServiceContract
TogafServiceContract_ERROR=Invalid owner element : Service Contract
TogafServiceContract_NAME=Service Contract
TogafServiceContract_TOOLTYPE=Service Contract
TogafServiceOperation_COMMANDENAME=TogafServiceOperation
TogafServiceOperation_ERROR=Invalid owner element : Service Operation
TogafServiceOperation_NAME=Service Operation
TogafServiceOperation_TOOLTYPE=Service Operation
SofwareDistributionDiagram_NOTE=\nThe Software Distribution diagram shows how application software is structured and distributed across the estate. It is useful in systems upgrade or application consolidation projects. This diagram shows how physical applications are distributed across physical technology and the location of that technology. This enables a clear view of how the software is hosted, but also enables managed operations staff to understand how that application software is maintained once installed.\nSame principle as network computing diagram, but the focus here is on software, and physical environments.
SofwareDistributionDiagram_SHORTNOTE=The Software Distribution diagram shows how application software is structured and distributed across the estate. 
TogafSofwareDistributionDiagram_NOTE=\nThe Software Distribution diagram shows how application software is structured and distributed across the estate. It is useful in systems upgrade or application consolidation projects. This diagram shows how physical applications are distributed across physical technology and the location of that technology. This enables a clear view of how the software is hosted, but also enables managed operations staff to understand how that application software is maintained once installed.\nSame principle as network computing diagram, but the focus here is on software, and physical environments.
TogafSofwareDistributionDiagram_SHORTNOTE=The Software Distribution diagram shows how application software is structured and distributed across the estate. 
TogafSolutionConceptDiagram_COMMANDENAME=TogafSolutionConceptDiagram
TogafSolutionConceptDiagram_ERROR=Invalid owner element : Solution Concept diagram
TogafSolutionConceptDiagram_NAME=Solution Concept diagram
TogafSolutionConceptDiagram_NOTE=\nA Solution Concept diagram provides a high-level orientation of the solution that is envisaged in order to meet the objectives of the architecture engagement. In contrast to the more formal and detailed architecture diagrams developed in the following phases, the solution concept represents a pencil sketch of the expected solution at the outset of the engagement. This diagram may embody key objectives, requirements, and constraints for the engagement and also highlight work areas to be investigated in more detail with formal architecture modeling. The purpose of this diagram is to quickly on-board and align stakeholders for a particular change initiative, so that all participants understand what the architecture engagement is seeking to achieve and how it is expected that a particular solution approach will meet the needs of the enterprise.\nHints : Present only the main application components of the solution, and summarize their connections using the \u0022access\u0022 dependency. Connect them to existing applications when necessary. Connect them to requirements, processes or functions, themselves connected to goals. Also express (\u0022consumes\u0022 dependency) which role uses which component.\nUnder Modelio : Create of drag & drop the components. Drag & drop the relevant requirements, goals, processes, functions or business services. Unmask or create the appropriate dependencies (consumes, satisfy, assigned, ...)
TogafSolutionConceptDiagram_SHORTNOTE=A Solution Concept diagram provides a high-level orientation of the solution that is envisaged in order to meet the objectives of the architecture engagement. 
TogafSolutionConceptDiagram_TOOLTYPE=Solution Concept diagram
TogafSystemFederation_COMMANDENAME=TogafSystemFederation
TogafSystemFederation_ERROR=Invalid owner element : System Federation
TogafSystemFederation_NAME=System Federation
TogafSystemFederation_TOOLTYPE=System Federation
TogafSystemUseCaseDiagram_COMMANDENAME=TogafSystemUseCaseDiagram
TogafSystemUseCaseDiagram_ERROR=Invalid owner element : System Use Case diagram
TogafSystemUseCaseDiagram_NAME=System Use Case diagram
TogafSystemUseCaseDiagram_TOOLTYPE=System Use Case diagram
TogafUseCaseDiagram_COMMANDENAME=TogafUseCaseDiagram
TogafUseCaseDiagram_ERROR=Invalid owner element : Use Case diagram
TogafUseCaseDiagram_NAME=Use Case diagram
TogafUseCaseDiagram_TOOLTYPE=Use Case diagram
TogafValueChainDiagram_COMMANDENAME=TogafValueChainDiagram
TogafValueChainDiagram_ERROR=Invalid owner element : Value Chain diagram
TogafValueChainDiagram_NAME=Value Chain diagram
TogafValueChainDiagram_TOOLTYPE=Value Chain diagram
TraceabilityDiagram_COMMANDENAME=TraceabilityDiagram
TraceabilityDiagram_ERROR=Invalid owner element : traceability
TraceabilityDiagram_NAME=Traceability
TraceabilityDiagram_TOOLTYPE=Traceability
UMLAssociation_COMMANDENAME=UMLAssociation
UMLAssociation_ERROR=Invalid owner element : Association 
UMLAssociation_NAME=Association
UMLAssociation_TOOLTYPE=Association
UMLComposition_COMMANDENAME=UMLComposition
UMLComposition_ERROR=Invalid owner element : Composition 
UMLComposition_NAME=Composition
UMLComposition_TOOLTYPE=Composition
UMLConnector_COMMANDENAME=UMLConnector
UMLConnector_ERROR=Invalid owner element : Connector
UMLConnector_NAME=Connector
UMLConnector_TOOLTYPE=Connector
UMLDependency_COMMANDENAME=UMLDependency
UMLDependency_ERROR=Invalid owner element : Dependency
UMLDependency_NAME=Dependency
UMLDependency_TOOLTYPE=Dependency
UMLElementImport_COMMANDENAME=UMLElementImport
UMLElementImport_ERROR=Invalid owner element : Element Import
UMLElementImport_NAME=Element Import
UMLElementImport_TOOLTYPE=Element Import
UMLEnumerationLitteral_COMMANDENAME=UMLEnumerationLitteral
UMLEnumerationLitteral_ERROR=Invalid owner element : Enumeration required
UMLEnumerationLitteral_NAME=Enumeration Literal
UMLEnumerationLitteral_TOOLTYPE=Enumeration Literal
UMLGeneralization_COMMANDENAME=UMLGeneralization
UMLGeneralization_ERROR=Invalid owner element : Generalization 
UMLGeneralization_NAME=Generalization
UMLGeneralization_TOOLTYPE=Generalization
UMLInformationFLow_COMMANDENAME=UMLInformationFLow 
UMLInformationFLow_ERROR=Invalid owner element : Information Flow
UMLInformationFLow_NAME=Information Flow
UMLInformationFLow_TOOLTYPE=Information Flow
UMLNote_COMMANDENAME=UMLNote
UMLNote_ERROR=Invalid owner element : Note
UMLNote_NAME=Note
UMLNote_TOOLTYPE=Note
UMLPackageImport_COMMANDENAME=UMLPackageImport
UMLPackageImport_ERROR=Element parent invalide : Package Import
UMLPackageImport_NAME=Package Import
UMLPackageImport_TOOLTYPE=Package Import
UMLTracability_COMMANDENAME=UMLTracability
UMLTracability_ERROR=Invalid owner element : Traceability
UMLTracability_NAME=Traceability
UMLTracability_TOOLTYPE=Traceability
UtilityApplicationComponent_COMMANDENAME=UtilityApplicationComponent
UtilityApplicationComponent_ERROR=Invalid owner element : Utility Component
UtilityApplicationComponent_NAME=Utility Component
UtilityApplicationComponent_TOOLTYPE=Utility Component
verify_COMMANDENAME=Verify
verify_ERROR=Verify : Model Element -> Requirement
verify_NAME=Verify
verify_TOOLTYPE=Model Element -> Requirement
ELEMENT_CREATION_SLOT=
System_Application_Component=System/Application
Service_Application_Component=Service Component
TogafApplicationCollaboration_NAME=Application Collaboration
TogafApplicationCollaboration_COMMANDENAME=TogafApplicationCollaboration
TogafApplicationCollaboration_TOOLTYPE=Application Collaboration
TogafApplicationCollaboration_ERROR=Invalid owner element : Application Collaboration
TogafBusinessCollaboration_NAME=Business Collaboration
TogafBusinessCollaboration_COMMANDENAME=TogafBusinessCollaboration
TogafBusinessCollaboration_TOOLTYPE=Business Collaboration
TogafBusinessCollaboration_ERROR=Invalid owner element : Business Collaboration

TogafSystemUseCaseDiagram_NOTE=\nA Use-Case diagram displays the relationships between consumers and providers of services.  Services are consumed by actors or other component services and the Use-Case diagram provides added richness in describing service components functionalities by illustrating how and when these functionalities are used. The purpose of the Use-Case diagram is to help describing and validating the interaction between actors and their roles with applications. As the architecture progresses, the use-case can evolve from functional information to include technical realization details. Architectural use-cases can also be re-used in more detailed systems design work.\nUnder Modelio : Create use cases, drag and drop roles and actors, drag and drop service components, and draw communication links between roles and use cases, and component realization links between components and use cases.
TogafSystemUseCaseDiagram_SHORTNOTE=A Use-Case diagram displays the relationships between consumers and providers of Services. 
TogafApplicationAndUserLocationDiagram_NOTE=The application and user location diagram shows the geographical distribution of applications.
TogafApplicationAndUserLocationDiagram_SHORTNOTE=The application and user location diagram shows the geographical distribution of applications. 
TogafApplicationCommunicationDiagram_NOTE=\nThe purpose of the SOA Architecture diagram is to depict the assembly of and communication between service components. It shows service components and interfaces between components. Communication should be logical and should only show intermediary technology where it is architecturally relevant.\nHints : Use service components to present as much as possible an SOA oriented architecture. Service components have different kinds that allows structuring them into layers, the main one being : GUI (interaction), Process, Entity. An Application Architecture may be hybrid due to the legacy system or external applications : \u0022Application\u0022 or \u0022DataBase\u0022 components serve this purpose, and can be mixed with SOA oriented service components. service components are connected via required or provided services which are connected through connectors. Provided/Required services are typed by services that are generally modeled elsewhere (such as within a component that manages this service).
TogafApplicationCommunicationDiagram_SHORTNOTE=The purpose of the Application Communication diagram is to depict all models and mappings related to communication between applications in the metamodel entity. 
ServiceDataDiagram_NOTE=\n Messages need a dedicated model and definition. The constitution of messages is modeled in this kind of diagram\nHints : message diagrams are most of the time deduced from the class diagrams of business entities, and the information exchange needs between services. They are the parameters of the service operations. The messages model is an extract of the business entities information needed by services. Think about extendibility and reusability, so that service evolution does not require redefining or creating new variants of messages. Messages become frequently XML documents : they have a message as a root, decomposed into message fragments.\nUnder Modelio : create a simple class diagram, having messages as roots, and being decomposed (composition association) into message fragments. 
ServiceDataDiagram_SHORTNOTE= Messages need a dedicated model and definition.
TogafNewtorkComputingHardwareDiagram_NOTE=\nStarting with the transformation to client-server systems from mainframes and later with the advent of e-Business and J2EE, large enterprises moved predominantly into a highly network based distributed network computing environment with firewalls and demilitarized zones. Currently, most of the applications have a web front-end and, looking at the deployment architecture of these applications, it is very common to find three distinct layers in the network landscape; namely a web presentation layer, a business logic or Application Layer, and a backend data store layer. It is a common practice for applications to be deployed and hosted in a shared and common infrastructure environment. So it becomes highly critical to document the mapping between logical applications and the technology components (e.g., server) that supports the application both in the development and production environments. The purpose of this diagram is to show the \u0022as deployed\u0022 logical view of logical service components in a distributed network computing environment.\nUnder Modelio: Create workstations, servers and connect them using network devices and association. Then, deploy service components by drag & dropping them to workstations and servers. You can also link roles or actors to their environment.
TogafNewtorkComputingHardwareDiagram_SHORTNOTE=Representation of the deployment of service components to computing devices (i.e. servers, workstations, \u2026).
TogafClassDiagram_NOTE=\nThe key purpose of the Class diagram is to depict the relationships among the critical data entities (or classes) within the enterprise. This diagram is developed to clearly present the relationships and to help understand the lower-level data models for the enterprise.\nHints : this diagram is at a high level of representation (conceptual). We are here interested in modeling the main Business Entities, their properties and relationships. The persistency model (typically for RDB) will be inferred later at the Application Layer.\nUnder Modelio : This is a class diagram, where the main notion is the \u0022Business Entity\u0022.
TogafClassDiagram_SHORTNOTE=The key purpose of the Class diagram is to depict the relationships among the critical data entities (or classes) within the enterprise. 
TogafDataLifeCycleDiagram_NOTE=\nThe Entity Lifecycle diagram is an essential part of managing business data throughout its lifecycle from conception until disposal within the constraints of the business process. The data is considered as an entity in its own right, decoupled from business process and activity. Each change in state is represented on the diagram which may include the event or rules that trigger that change in state. The separation of data from process allows common data requirements to be identified which enables resource sharing to be achieved more effectively.\n- Hints: Identify the possible states of the entity (for example, a document can be \u0022underCreation\u0022, \u0022underRevision\u0022, \u0022approved\u0022, etc.), and define the possible transitions between each states. A state must be a stable situation of a data : when no action is executed on it, the data is always in one of the identified states.
TogafDataLifeCycleDiagram_SHORTNOTE=The Entity Lifecycle diagram is an essential part of managing business entities throughout its lifecycle from conception until disposal within the constraints of the business process. 
TogafProcessFlowDiagram_NOTE=\nBusiness Process modeling is done using business process diagrams.\nThe purpose of the business process diagram is to depict all models and mappings related to a process. Business process diagrams show sequential flows of control between activities and may utilize swim-lane techniques to represent ownership and realization of process steps. For example, the application that supports a process step may be shown as a swim-lane. In addition to showing a sequence of activities, business process diagrams can also be used to detail the controls that apply to a process, the events that trigger or result from completion of a process, and also the products that are generated from process execution. Business process diagrams are useful in elaborating the architecture with subject specialists, as they allow the specialist to describe how the job is done for a particular function. Through this process, each process step can become a more fine-grained function and can then in turn be elaborated as a process.\nUnder Modelio : Business process diagrams are modeled using BPMN. Pools and lanes can be assigned to existing actors or organization units. Business Entities can be used to type data objects, and their states (from their entity lifecycle diagrams) can be shown during the processing.
TogafProcessFlowDiagram_SHORTNOTE=Business Process modeling is done using business process diagrams.\nThe purpose of the business process diagram is to depict all models and mappings related to a process. 
TogafFunctionalDecompositionDiagram_NOTE=\nThe purpose of the Functional Decomposition diagram is to show on a single page the capabilities of an organization that are relevant to the consideration of an architecture. By examining the capabilities of an organization from a functional perspective, it is possible to quickly develop models of what the organization does without being dragged into extended debate on how the organization does it. Once a basic Functional Decomposition diagram has been developed, it becomes possible to layer heat-maps on top of this diagram to show scope and decisions. For example, the capabilities to be implemented in different phases of a change program.\nUnder Modelio : Dedicated dependencies can be used to enrich the model, for example to indicate which application components support which function, which role uses which function, etc. Function decomposition can be expressed by \u0022containment\u0022 (just create a function in another function), or by using the \u0022part\u0022 dependency.
TogafFunctionalDecompositionDiagram_SHORTNOTE=The purpose of the Functional Decomposition diagram is to show on a single page the capabilities of an organization that are relevant to the consideration of an architecture. 
TogafProductLifeCycleDiagram_NOTE=\nThe purpose of the Product Lifecycle diagram is to assist in understanding the lifecycles of key entities within the enterprise. Understanding product lifecycles is becoming increasingly important with respect to environmental concerns, legislation, and regulation where products must be tracked from manufacture to disposal. Equally, organizations that create products that involve personal or sensitive information must have a detailed understanding of the product lifecycle during the development of Business Architecture in order to ensure rigor in design of controls, processes, and procedures. Examples of this would include credit cards, debit cards, store/loyalty cards, smart cards, user identity credentials (identity cards, passports, etc.).\nUnder Modelio: Product LifeCycleDiagrams are state machine diagrams on BusinessEntities.
TogafProductLifeCycleDiagram_SHORTNOTE=The purpose of the Product Lifecycle diagram is to assist in understanding the lifecycles of key entities within the enterprise.
TogafBusinessUseCaseDiagram_NOTE=\nA Business Use-Case diagram displays the relationships between consumers and providers of business services. Business services are consumed by actors or other business services and the Business Use-Case diagram provides added richness in describing business capability by illustrating how and when that capability is used. The purpose of the Business Use-Case diagram is to help to describe and validate the interaction between actors and their roles to processes and functions. As the architecture progresses, the use-case can evolve from the business level to include data, application, and technology details. Architectural business use-cases can also be re-used in systems design work.
TogafBusinessUseCaseDiagram_SHORTNOTE=A Business Use-Case diagram displays the relationships between consumers and providers of business services.
TogafOrganizationDecompositionDiagram_NOTE=\nAn Organization diagram describes the links between actors, and locations within an organization tree. An organization map (organization diagram) should provide a chain of command of owners and decision makers in the organization. Although it is not the intent of the Organization diagram to link goals to organization, it should be possible to intuitively link the goals to the stakeholders from the Organization diagram.\nThis diagram can also describe the definition of actors and their responsibilities : the organization is presented in terms of connections between actors, or between actors and organization units showing hierarchical links, communications and responsibilities.\nMissions and responsibilities within an organization can also be emphasized by presenting the main information flows circulating between the major participants of the enterprise. This presents which information is received, processes or emitted by who in the organization, showing thus the responsibilities of organizational elements.\nUnder Modelio : organization units can be deployed under locations (drag & drop organization units from the explorer to locations in the diagram). \u0022localization\u0022 dependencies express where roles or actors are localized. As in every diagram, goals can be dragged and dropped, and traced to organizations roles.
TogafOrganizationDecompositionDiagram_SHORTNOTE=An Organization diagram describes the links between actors, and locations within an organization tree. 
TogafEventDiagram_NOTE=The purpose of the process map diagram is to depict the relationship between events and process. Certain events such as arrival of certain information (e.g., customer submits sales order) or a certain point in time (e.g., end of fiscal quarter)  cause work and certain actions need to be undertaken within the business. These are often referred to as business events or simply events and are considered as triggers for a process. It is important to note that the event has to trigger a process and generate a business response or result.\nUnder Modelio:  Events are connected to processes using \u0022flow\u0022 dependencies, roles can be initiator or participant to processes, products can be connected to processes through the \u0022flow\u0022 dependencies.
TogafEventDiagram_SHORTNOTE=The purpose of the process map diagram is to depict the relationship between events and process, and to show an overview of the business processes.
TogafValueChainDiagram_NOTE=\nA Value Chain diagram provides a high-level orientation view of an enterprise and how it interacts with the outside world. In contrast to the more formal Functional Decomposition diagram, the Value Chain diagram focuses on presentational impact. The purpose of this diagram is to quickly on-board and align stakeholders for a particular change initiative, so that all participants understand the high-level functional and organizational context of the architecture engagement. A usual practice consists in showing a simplified business process diagram, and for each task defining its value factors and changes needed.\nUnder Modelio : Use sequence dependencies between functions to express value chains. The \u0022 Value factors\u0022 and \u0022changes needed\u0022 types of notes are expressing this key information.
TogafValueChainDiagram_SHORTNOTE=A Value Chain diagram provides a high-level orientation view of an enterprise and how it interacts with the outside world. 
TogafLocationDiagram_NOTE=This kind of diagram helps in formalizing the locations of an enterprise, and the distribution of platforms and business services on it.
TogafLocationDiagram_SHORTNOTE=This kind of diagram helps in formalizing the locations of an enterprise, and the distribution of platforms and business services on it.
TogafMatrixDiagram_NOTE=\nThe purpose of Matrix diagrams is to define dependencies that will produce the Excell Matrices. Matrix diagrams are also useful to define general purpose traceabilities between elements.\nUnder Modelio: Drag and drop in the diagram the origin and destination elements, and trace the appropriate links.
TogafMatrixDiagram_SHORTNOTE=The purpose of Matrix diagrams is to define dependencies that will produce the Excell Matrices. Matrix diagrams are also useful to define general purpose traceabilities between elements.
TogafUseCaseDiagram_NOTE=\nA Use-Case diagram displays the relationships between consumers and providers of services.  Services are consumed by actors or other component services and the Use-Case diagram provides added richness in describing service components functionalities by illustrating how and when these functionalities are used. The purpose of the Use-Case diagram is to help describing and validating the interaction between actors and their roles with applications. As the architecture progresses, the use-case can evolve from functional information to include technical realization details. Architectural use-cases can also be re-used in more detailed systems design work.\nUnder Modelio : Create use cases, drag and drop roles and actors, drag and drop service components, and draw communication links between roles and use cases, and component realization links between components and use cases.
TogafUseCaseDiagram_SHORTNOTE=A Use-Case diagram displays the relationships between consumers and providers of Services. 


